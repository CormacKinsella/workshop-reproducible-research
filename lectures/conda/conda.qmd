---
title: 'Managing software environments with <br> <img src="images/conda-logo.png" style="width:50%;padding: 25px 25px 25px 25px;">'
format: revealjs
execute:
  echo: false
jupyter:
    kernelspec:
        display_name: Python 3
        language: python
        name: python3
---

## The problem

![](images/dying-script.jpg)

::: {.fragment .justify-center}
_Full reproducibility requires the possibility to recreate the system that was
originally used to generate the results._
:::

## Conda is a package, dependency, and environment manager {auto-animate="true"}

- [package]{.green}: any type of program (_e.g._ multiqc, snakemake etc.)

::: {data-id="flowchart1"}
```{mermaid}
flowchart LR
    multiqc(multiqc)
```
:::

## Conda is a package, dependency, and environment manager {auto-animate="true"}

- [package]{.green}: any type of program (_e.g._ multiqc, snakemake etc.)
- [dependency]{.green}: other software required by a package

::: {data-id="flowchart1"}
```{mermaid}
flowchart LR
    multiqc(multiqc) -.-> numpy(numpy)
    multiqc -.-> matplotlib(matplotlib)
    multiqc -.-> python(python)
```
:::

## Conda is a package, dependency, and environment manager {auto-animate="true"}

- [package]{.green}: any type of program (_e.g._ multiqc, snakemake etc.)
- [dependency]{.green}: other software required by a package
  - dependencies in turn have their own dependencies

::: {data-id="flowchart1"}
```{mermaid}
flowchart LR
    multiqc(multiqc) -.-> numpy(numpy)
    multiqc -.-> matplotlib(matplotlib)
    multiqc -.-> python(python)
    matplotlib -.-> python
    matplotlib -.-> numpy
    matplotlib -.-> fonttools(fonttools)
    numpy -.-> python
    numpy -.-> libcxx(libcxx)
```
:::

## Conda is a package, dependency, and environment manager {auto-animate="true"}

- [package]{.green}: any type of program (_e.g._ multiqc, snakemake etc.)
- [dependency]{.green}: other software required by a package
  - dependencies in turn have their own dependencies
- [environment]{.green}: a distinct collection of packages

::: {data-id="flowchart1"}
```{mermaid}
flowchart LR
    subgraph environment
    style environment fill:#00000000, stroke-width:1px
    direction LR
    multiqc(multiqc) -.-> numpy(numpy)
    multiqc -.-> matplotlib(matplotlib)
    multiqc -.-> python(python)
    matplotlib -.-> python
    matplotlib -.-> numpy
    matplotlib -.-> fonttools(fonttools)
    numpy-.->python
    numpy -.-> libcxx(libcxx)
    end
```
:::

## Conda channels {auto-animate=true}

[Channels]{.green} are remote directories containing packages

::: {data-id="m1"}
```{mermaid}
flowchart TD
    ch1[(channel1)] --- p1[package1]
    ch1[(channel1)] --- p2[package2]
    ch1[(channel1)] --- p3[package3]

    ch2[(channel2)] --- p4[package4]
    ch2[(channel2)] --- p5[package5]
    ch2[(channel2)] --- p6[package6]
```
:::

## Conda channels {auto-animate=true}

Two common examples are:

- [bioconda]{.green} (a channel specializing in bioinformatics software)
- [conda-forge]{.green} (a community-led channel made up of thousands of contributors)

::: {data-id="m1"}
```{mermaid}
flowchart TD
    ch1[(bioconda)] --- p1[bowtie2]
    ch1[(bioconda)] --- p2[fastqc]
    ch1[(bioconda)] --- p3[snakemake]

    ch2[(conda-forge)] --- p4[numpy]
    ch2[(conda-forge)] --- p5[jupyter]
    ch2[(conda-forge)] --- p6[wget]
```
:::

## Conda channels {auto-animate=true}

Two common examples are:

- [bioconda]{.green} (a channel specializing in bioinformatics software)
- [conda-forge]{.green} (a community-led channel made up of thousands of contributors)

::: {data-id="m1"}
```{mermaid}
flowchart TD
    ch1[(bioconda)] --- p1[bowtie2]
    ch1[(bioconda)] --- p2[fastqc]
    ch1[(bioconda)] --- p3[snakemake]

    ch2[(conda-forge)] --- p4[numpy]
    ch2[(conda-forge)] --- p5[jupyter]
    ch2[(conda-forge)] --- p6[wget]

    p5 -.-> l1([conda install -c conda-forge -c bioconda snakemake jupyter])
    p3 -.-> l1
```
:::

## Defining and sharing environments

Define a Conda environment in an `environment.yml` file:

``` {.yaml code-line-numbers="|1-3|4-12"}
channels:
  - conda-forge
  - bioconda
dependencies:
  - fastqc=0.11
  - sra-tools=2.8
  - snakemake=4.3.0
  - multiqc=1.3
  - bowtie2=2.3
  - samtools=1.6
  - htseq=0.9
  - graphviz=2.38.0
```

## Defining and sharing environments {auto-animate="true"}

- Update an existing environment:

```bash
conda env update -f environment.yml
```

## Defining and sharing environments {auto-animate="true"}

- Update an existing environment:

```bash
conda env update -f environment.yml
```

- Export environment (including all dependencies) to a file:

```bash
conda env export > environment.yml
```

## Defining and sharing environments {auto-animate="true"}

- Update an existing environment:

```bash
conda env update -f environment.yml
```

- Export environment (including all dependencies) to a file:

```bash
conda env export > environment.yml
```

- Export historical environment (only packages explicitly installed):

```bash
conda env export --from-history > environment.yml
```

## Conda, Anaconda, Miniconda, Miniforge...

::: {.incremental}
- [Conda]{.green}: The package manager itself, written in python
- [Anaconda]{.green}:
  - The company behind Conda itself
  - An installer for Conda containing over 7,500 open-source packages
  - A cloud service where conda packages are hosted ([anaconda.com](https://anaconda.com))
- [Miniconda]{.green}: A minimal installer for Conda, pre-configured to use the
  `default` channel
- [Miniforge]{.green}: A minimal installer for Conda, pre-configured to use the
  `conda-forge` channel (use this!)
:::

# Questions?
